<html xmlns="http://www.w3.org/1999/xhtml">
    <body>

        <div id="forecast"></div>

        <script>//<![CDATA[

            const latlong = window.location.hash.substring(1)
            if (!latlong) {
                alert('Include your latitude and longitude in the URL. To find it you can search google maps and copy everything in the URL _after_ the @ sign. Like this: ...#41.6224273,-97.1851129')
            }
            const [latitude, longitude] = latlong.split(',')

            const output = document.querySelector('#forecast');
            async function doStuff() {
                const parser = new DOMParser();
                const processor = new XSLTProcessor();
                const style = parser.parseFromString(`<xsl:stylesheet 
                xmlns="http://www.w3.org/1999/xhtml" 
                xmlns:x="https://philschatz.com/custom-weather-namespace-so-we-can-xpath" 
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
                exclude-result-prefixes="xsi"
                version="1.0">

<xsl:output method="xml" omit-xml-declaration="yes" encoding="utf-8"/>

<xsl:template name="doDay">
    <xsl:param name="position"/>
    <xsl:variable name="day" select="//x:time-layout[starts-with(x:layout-key/text(), 'k-p24h-')]/x:start-valid-time[position() = $position]"/>
    <xsl:variable name="max" select="//x:parameters/x:temperature[@type='maximum']/x:value[position() = $position]/text()"/>
    <xsl:variable name="min" select="//x:parameters/x:temperature[@type='minimum']/x:value[position() = $position]/text()"/>

    <xsl:variable name="maxStyle"><xsl:call-template name="stylize"><xsl:with-param name="temp" select="$max"/></xsl:call-template></xsl:variable>
    <xsl:variable name="minStyle"><xsl:call-template name="stylize"><xsl:with-param name="temp" select="$min"/></xsl:call-template></xsl:variable>

    <tr>
        <td><time datetime="{$day/text()}"><xsl:value-of select="$day/@period-name"/></time></td>
        <td style="{$maxStyle}"><xsl:value-of select="$max"/></td>
        <td style="{$minStyle}"><xsl:value-of select="$min"/></td>
    </tr>
</xsl:template>


<xsl:template match="@*|node()">
    <xsl:copy>
        <xsl:apply-templates select="@*|node()"/>
    </xsl:copy>
</xsl:template>

<xsl:template match="/x:dwml">

    <xsl:for-each select=".//x:hazard">
        <p>
            <a href="{x:hazardTextURL}"><em><xsl:value-of select="@headline"/></em></a><xsl:text>. </xsl:text>
        </p>
    </xsl:for-each>

    <table>
        <thead><tr><td>Day</td><td>High</td><td>Low</td></tr></thead>
        <tbody>
            <xsl:call-template name="doDay"><xsl:with-param name="position" select="1"/></xsl:call-template>
            <xsl:call-template name="doDay"><xsl:with-param name="position" select="2"/></xsl:call-template>
            <xsl:call-template name="doDay"><xsl:with-param name="position" select="3"/></xsl:call-template>
            <xsl:call-template name="doDay"><xsl:with-param name="position" select="4"/></xsl:call-template>
            <xsl:call-template name="doDay"><xsl:with-param name="position" select="5"/></xsl:call-template>
            <xsl:call-template name="doDay"><xsl:with-param name="position" select="6"/></xsl:call-template>
            <xsl:call-template name="doDay"><xsl:with-param name="position" select="7"/></xsl:call-template>
        </tbody>
    </table>

</xsl:template>


<xsl:template name="stylize">
    <xsl:param name="temp"/>

    <xsl:choose>
        <xsl:when test="$temp > 90">color: red; font-weight: bold;</xsl:when>
        <xsl:when test="$temp > 80">color: red;</xsl:when>
        <xsl:when test="$temp > 40"></xsl:when>
        <xsl:when test="$temp > 20">color: blue;</xsl:when>
        <xsl:when test="$temp > -200">color: blue; font-weight: bold;</xsl:when>
        <xsl:otherwise></xsl:otherwise>
    </xsl:choose>
</xsl:template>


</xsl:stylesheet>`, 'application/xml')

                processor.importStylesheet(style.documentElement);
       
                let xml = await (await fetch(`https://forecast.weather.gov/MapClick.php?lat=${latitude}&lon=${longitude}&unit=0&lg=english&FcstType=dwml`)).text()
                xml = xml.replace('<dwml ', '<dwml xmlns="https://philschatz.com/custom-weather-namespace-so-we-can-xpath" ')
                const doc = parser.parseFromString(xml, 'application/xml')
                const newFragment = processor.transformToFragment(doc.documentElement, doc)
                if (newFragment) {
                    output.append(newFragment)
                } else {
                    output.append('could not download weather data or could not process the weather data')
                }
            }
            doStuff()
        // ]]></script>
    </body>
</html>